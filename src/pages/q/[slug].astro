---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import StarRating from '../../components/StarRating.jsx';
import CardQuestion from '../../components/CardQuestion.astro';
import ImageWithFallback from '../../components/ImageWithFallback.astro';
import { formatDate, relatedByTags } from '../../lib/utils';

// Get the slug from the URL params
const { slug } = Astro.params;

// Get the entry dynamically (for server mode)
const qaEntries = await getCollection('qa');
const entry = qaEntries.find(entry => entry.slug === slug);

// Handle 404 cases - return 404 response if entry doesn't exist
if (!entry) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  });
}

const { Content } = await entry.render();
const { question, shortAnswer, pubDate, updatedDate, tags, difficulty, heroImage } = entry.data;

// Get all questions for related content
const allQuestions = await getCollection('qa');
const relatedQuestions = relatedByTags(entry, allQuestions, 3);

// Load initial rating data for better hydration
let initialRatingData = {
  average: null,
  count: 0,
  userRating: null
};

try {
  // Import data storage functions
  const { loadRatings, generateUserId } = await import('../../lib/dataStorage.js');
  
  // Load ratings data
  const ratingsData = await loadRatings();
  const questionRating = ratingsData[entry.slug];
  
  if (questionRating) {
    initialRatingData.average = questionRating.average;
    initialRatingData.count = questionRating.count;
    
    // Generate user ID to check if they have rated this question
    const userAgent = Astro.request.headers.get('user-agent') || '';
    const ip = Astro.clientAddress || '127.0.0.1';
    const userId = generateUserId(ip, userAgent);
    
    if (userId in questionRating.ratings) {
      initialRatingData.userRating = questionRating.ratings[userId];
    }
  }
} catch (error) {
  console.warn('Failed to load initial rating data:', error);
  // Continue with default values
}

// Breadcrumb items
const breadcrumbItems = [
  { label: 'الرئيسية', href: '/' },
  { label: question }
];

// Difficulty labels in Arabic
const difficultyLabels = {
  easy: 'سهل',
  medium: 'متوسط', 
  hard: 'صعب'
};

// Difficulty colors
const difficultyColors = {
  easy: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300',
  medium: 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300',
  hard: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
};

// SEO title and description
const pageTitle = `${question} - موقع الأسئلة والأجوبة`;
const pageDescription = shortAnswer;

// Enhanced structured data for better SEO
const faqStructuredData = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": {
    "@type": "Question",
    "name": question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": shortAnswer,
      "dateCreated": pubDate.toISOString(),
      "upvoteCount": 0,
      "author": {
        "@type": "Organization",
        "name": "موقع الأسئلة والأجوبة"
      }
    },
    "answerCount": 1,
    "dateCreated": pubDate.toISOString(),
    "author": {
      "@type": "Organization", 
      "name": "موقع الأسئلة والأجوبة"
    }
  }
};

const blogPostingStructuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": question,
  "description": shortAnswer,
  "datePublished": pubDate.toISOString(),
  "dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
  "author": {
    "@type": "Organization",
    "name": "موقع الأسئلة والأجوبة",
    "url": Astro.site?.toString()
  },
  "publisher": {
    "@type": "Organization", 
    "name": "موقع الأسئلة والأجوبة",
    "url": Astro.site?.toString(),
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/favicon.svg', Astro.site).toString()
    }
  },
  "keywords": tags.join(", "),
  "articleSection": "أسئلة وأجوبة",
  "wordCount": shortAnswer.length,
  "inLanguage": "ar",
  "isAccessibleForFree": true,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": new URL(Astro.url.pathname, Astro.site).toString()
  }
};

// Add breadcrumb structured data
const breadcrumbStructuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "الرئيسية",
      "item": Astro.site?.toString()
    },
    {
      "@type": "ListItem", 
      "position": 2,
      "name": "الأسئلة",
      "item": new URL('/questions', Astro.site).toString()
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": question,
      "item": new URL(Astro.url.pathname, Astro.site).toString()
    }
  ]
};
---

<BaseLayout 
  title={pageTitle}
  description={pageDescription}
  ogImage={heroImage}
>
  <!-- Enhanced Structured Data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(faqStructuredData)} is:inline />
  <script type="application/ld+json" set:html={JSON.stringify(blogPostingStructuredData)} is:inline />
  <script type="application/ld+json" set:html={JSON.stringify(breadcrumbStructuredData)} is:inline />

  <!-- Breadcrumbs at the top before title -->
  <Breadcrumbs items={breadcrumbItems} class="mb-6" />

  <article class="space-y-8 text-zinc-900 dark:text-zinc-100">
    <!-- Question Header -->
    <header class="space-y-4">
      <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-zinc-900 dark:text-zinc-100 leading-tight break-words">
        {question}
      </h1>
      
      <!-- Metadata -->
      <div class="flex flex-wrap items-center gap-2 sm:gap-4 text-xs sm:text-sm text-zinc-600 dark:text-zinc-400">
        <div class="flex items-center gap-1 sm:gap-2">
          <svg class="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <time datetime={pubDate.toISOString()} class="truncate">
            <span class="hidden sm:inline">نُشر في </span>{formatDate(pubDate)}
          </time>
        </div>
        
        {updatedDate && (
          <div class="flex items-center gap-1 sm:gap-2">
            <svg class="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            <time datetime={updatedDate.toISOString()} class="truncate">
              <span class="hidden sm:inline">آخر تحديث </span>{formatDate(updatedDate)}
            </time>
          </div>
        )}
        
        <span class={`inline-flex items-center px-2 sm:px-2.5 py-0.5 rounded-full text-xs font-medium ${difficultyColors[difficulty]} flex-shrink-0`}>
          {difficultyLabels[difficulty]}
        </span>
      </div>

      <!-- Tags -->
      {tags.length > 0 && (
        <div class="flex flex-wrap gap-1.5 sm:gap-2">
          {tags.map((tag) => (
            <a 
              href={`/tags/${tag}`}
              class="inline-flex items-center px-2 sm:px-3 py-1 rounded-md text-xs sm:text-sm font-medium bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300 hover:bg-indigo-200 dark:hover:bg-indigo-900/50 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500 focus-visible:ring-offset-2 dark:focus-visible:ring-indigo-400 dark:focus-visible:ring-offset-zinc-950 hover:scale-105 break-words"
              aria-label={`عرض جميع الأسئلة المتعلقة بوسم ${tag}`}
            >
              #{tag}
            </a>
          ))}
        </div>
      )}
    </header>

    <!-- Hero Image with Fallback -->
    <ImageWithFallback 
      src={heroImage}
      alt={`صورة توضيحية للسؤال: ${question}`}
      questionText={question}
      width={800}
      height={450}
      loading="lazy"
      decoding="async"
      showPlaceholder={true}
      placeholderType="generated"
      showQuestionText={true}
    />

    <!-- Short Answer Highlight -->
    <div class="bg-indigo-50 dark:bg-indigo-900/20 border border-indigo-200 dark:border-indigo-800 rounded-lg p-4 sm:p-6">
      <h2 class="text-base sm:text-lg font-semibold text-indigo-900 dark:text-indigo-100 mb-3 flex items-center gap-2">
        <svg class="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
        </svg>
        الإجابة المختصرة
      </h2>
      <p class="text-indigo-800 dark:text-indigo-200 text-base sm:text-lg leading-relaxed break-words">
        {shortAnswer}
      </p>
    </div>

    <!-- Star Rating Component -->
    <div class="flex justify-center" id="rating-container">
      <!-- Enhanced static fallback with initial data -->
      <div id="rating-fallback" class="rating-fallback flex flex-col items-center gap-3 p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg border border-zinc-200 dark:border-zinc-700 transition-all duration-300 min-h-[140px] w-full max-w-md">
        <h3 class="text-lg font-semibold text-zinc-900 dark:text-zinc-100 transition-colors duration-200">
          قيم هذا السؤال
        </h3>
        <div class="flex gap-1" role="radiogroup" aria-label="تقييم السؤال من 1 إلى 5 نجوم">
          {[1, 2, 3, 4, 5].map((star) => (
            <span class={`text-2xl transition-all duration-200 rounded ${
              initialRatingData.userRating && star <= initialRatingData.userRating 
                ? 'text-yellow-400 dark:text-yellow-300' + (star === initialRatingData.userRating ? ' drop-shadow-lg' : '')
                : 'text-zinc-300 dark:text-zinc-600'
            }`} aria-label={`${star} ${star === 1 ? 'نجمة' : 'نجوم'}`}>★</span>
          ))}
        </div>
        {initialRatingData.average !== null && initialRatingData.count > 0 ? (
          <div class="text-sm text-zinc-600 dark:text-zinc-400 text-center transition-colors duration-200">
            <span>متوسط التقييم: {initialRatingData.average.toFixed(1)} من 5</span>
            <span class="mx-2">•</span>
            <span>({initialRatingData.count} {initialRatingData.count === 1 ? 'تقييم' : 'تقييمات'})</span>
          </div>
        ) : (
          <p class="text-sm text-zinc-500 dark:text-zinc-500 text-center">
            جاري التحميل...
          </p>
        )}
        {initialRatingData.userRating && (
          <p class="text-sm text-green-600 dark:text-green-400 text-center transition-colors duration-200">
            تقييمك: {initialRatingData.userRating} {initialRatingData.userRating === 1 ? 'نجمة' : 'نجوم'} - يمكنك تغييره بالضغط على نجمة أخرى
          </p>
        )}
        {!initialRatingData.userRating && (
          <p class="text-sm text-zinc-500 dark:text-zinc-500 text-center transition-colors duration-200">
            اضغط على النجوم لإعطاء تقييم
          </p>
        )}
      </div>
      <div id="rating-react" class="hidden">
        <StarRating 
          slug={entry.slug} 
          initialData={initialRatingData}
          client:load 
        />
      </div>
    </div>

    <!-- Detailed Content -->
    <div class="content-area bg-white dark:bg-zinc-900 rounded-lg p-4 sm:p-6 border border-zinc-200 dark:border-zinc-800">
      <div class="prose prose-base sm:prose-lg prose-zinc dark:prose-invert max-w-none force-visible
                  prose-headings:text-zinc-900 dark:prose-headings:text-zinc-100 
                  prose-p:text-zinc-700 dark:prose-p:text-zinc-300 
                  prose-a:text-indigo-600 dark:prose-a:text-indigo-400 
                  prose-strong:text-zinc-900 dark:prose-strong:text-zinc-100
                  prose-li:text-zinc-700 dark:prose-li:text-zinc-300
                  prose-blockquote:text-zinc-600 dark:prose-blockquote:text-zinc-400
                  prose-code:text-zinc-800 dark:prose-code:text-zinc-200
                  text-zinc-700 dark:text-zinc-300
                  break-words overflow-wrap-anywhere">
        <Content />
      </div>
    </div>

    <!-- Related Questions -->
    {relatedQuestions.length > 0 && (
      <section class="border-t border-zinc-200 dark:border-zinc-800 pt-8">
        <h2 class="text-xl sm:text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-4 sm:mb-6 flex items-center gap-2">
          <svg class="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
          </svg>
          أسئلة ذات صلة
        </h2>
        <div class="grid gap-4 sm:gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {relatedQuestions.map((relatedQuestion) => (
            <CardQuestion
              href={`/q/${relatedQuestion.slug}`}
              title={relatedQuestion.data.question}
              description={relatedQuestion.data.shortAnswer}
              date={relatedQuestion.data.pubDate}
              tags={relatedQuestion.data.tags}
              difficulty={relatedQuestion.data.difficulty}
            />
          ))}
        </div>
      </section>
    )}
  </article>
</BaseLayout>