---
import { getFirstChar, getPlaceholderColors, generatePlaceholderUrl, formatTextForPlaceholder, getResponsiveFontSize, getMobileOptimizedText } from '../lib/imageUtils';
import { generateSrcSet, generateSizes } from '../lib/performance';

export interface Props {
  src?: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  priority?: boolean;
  sizes?: string;
  widths?: number[];
  showPlaceholder?: boolean;
  placeholderType?: 'generated' | 'default' | 'none';
  questionText?: string;
  showQuestionText?: boolean;
}

const {
  src,
  alt,
  class: className = '',
  width = 800,
  height = 450,
  loading = 'lazy',
  decoding = 'async',
  priority = false,
  sizes,
  widths = [400, 800, 1200],
  showPlaceholder = true,
  placeholderType = 'generated',
  questionText,
  showQuestionText = true
} = Astro.props;

// Generate responsive attributes for optimization
const srcSet = src ? generateSrcSet(src, widths) : '';
const sizesAttr = sizes || generateSizes();

// Priority images should load eagerly
const loadingAttr = priority ? 'eager' : loading;
const fetchPriority = priority ? 'high' : 'auto';

// Generate placeholder data using utilities
const firstChar = getFirstChar(alt);
const colors = getPlaceholderColors(alt);
const defaultPlaceholder = generatePlaceholderUrl({ width, height, text: alt, type: 'question' });

// Format question text for display with mobile optimization
const baseText = questionText || alt;
const optimizedText = getMobileOptimizedText(baseText);
const displayText = optimizedText.mobile; // Use mobile-optimized text as default
const shouldShowText = showQuestionText && baseText;
const textFontSize = getResponsiveFontSize(displayText.length);
---

<div class={`relative aspect-video rounded-lg overflow-hidden bg-zinc-100 dark:bg-zinc-800 min-h-[200px] sm:min-h-[250px] md:min-h-[300px] ${className}`}>
  {src ? (
    <>
      <!-- Actual Image with responsive optimization -->
      <img
        src={src}
        srcset={srcSet}
        sizes={sizesAttr}
        alt={alt}
        class="w-full h-full object-cover transition-opacity duration-300 image-main optimized-image"
        width={width}
        height={height}
        loading={loadingAttr}
        decoding={decoding}
        fetchpriority={fetchPriority}
        style="opacity: 0; aspect-ratio: auto;"
        onload="this.style.opacity='1'; this.classList.add('loaded'); this.nextElementSibling?.style && (this.nextElementSibling.style.display='none');"
        onerror="this.style.display='none'; this.nextElementSibling?.style && (this.nextElementSibling.style.display='flex');"
      />
      
      <!-- Fallback Placeholder -->
      {showPlaceholder && (
        <>
          {placeholderType === 'default' ? (
            <div class="absolute inset-0 image-fallback">
              <img 
                src={defaultPlaceholder}
                alt={`صورة افتراضية للسؤال: ${alt}`}
                class="w-full h-full object-cover"
                width={width}
                height={height}
              />
            </div>
          ) : placeholderType === 'generated' ? (
            <div class={`absolute inset-0 flex items-center justify-center bg-gradient-to-br ${colors.gradient} image-fallback p-3 sm:p-6 md:p-8`}>
              <div class="text-center text-white max-w-full w-full">
                {shouldShowText ? (
                  <>
                    <!-- Question Icon with Background -->
                    <div class="mb-3 sm:mb-4 md:mb-6">
                      <div class="w-12 h-12 sm:w-16 sm:h-16 md:w-20 md:h-20 mx-auto bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                        <svg class="w-6 h-6 sm:w-8 sm:h-8 md:w-10 md:h-10" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/>
                        </svg>
                      </div>
                    </div>
                    <!-- Question Text with Background -->
                    <div class="bg-black/20 backdrop-blur-sm rounded-lg p-2 sm:p-3 md:p-4 mb-2 sm:mb-3 md:mb-4 mx-2 sm:mx-3 md:mx-4">
                      <div class={`${textFontSize} font-semibold leading-relaxed text-center break-words`}>
                        <!-- Mobile text (shortest) -->
                        <span class="block sm:hidden">{optimizedText.mobile}</span>
                        <!-- Tablet text (medium) -->
                        <span class="hidden sm:block md:hidden">{optimizedText.tablet}</span>
                        <!-- Desktop text (longest) -->
                        <span class="hidden md:block">{optimizedText.desktop}</span>
                      </div>
                    </div>
                    <!-- Subtitle -->
                    <div class="text-xs sm:text-sm opacity-75 px-2 sm:px-3 md:px-4">
                      صورة توضيحية للسؤال
                    </div>
                  </>
                ) : (
                  <>
                    <!-- Fallback to character display -->
                    <div class="text-4xl sm:text-5xl md:text-6xl font-bold mb-1 sm:mb-2 opacity-90">
                      {firstChar}
                    </div>
                    <div class="text-xs sm:text-sm opacity-75 px-2 sm:px-3 md:px-4">
                      صورة توضيحية
                    </div>
                  </>
                )}
              </div>
            </div>
          ) : null}
        </>
      )}
    </>
  ) : showPlaceholder ? (
    <!-- Only Placeholder (no src provided) -->
    <div class="w-full h-full">
      {placeholderType === 'default' ? (
        <img
          src={defaultPlaceholder}
          alt={`صورة افتراضية للسؤال: ${alt}`}
          class="w-full h-full object-cover"
          width={width}
          height={height}
          loading={loading}
        />
      ) : placeholderType === 'generated' ? (
        <div class={`flex items-center justify-center bg-gradient-to-br ${colors.gradient} w-full h-full p-3 sm:p-6 md:p-8`}>
          <div class="text-center text-white max-w-full w-full">
            {shouldShowText ? (
              <>
                <!-- Question Icon with Background -->
                <div class="mb-3 sm:mb-4 md:mb-6">
                  <div class="w-12 h-12 sm:w-16 sm:h-16 md:w-20 md:h-20 mx-auto bg-white/20 rounded-full flex items-center justify-center backdrop-blur-sm">
                    <svg class="w-6 h-6 sm:w-8 sm:h-8 md:w-10 md:h-10" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/>
                    </svg>
                  </div>
                </div>
                <!-- Question Text with Background -->
                <div class="bg-black/20 backdrop-blur-sm rounded-lg p-2 sm:p-3 md:p-4 mb-2 sm:mb-3 md:mb-4 mx-2 sm:mx-3 md:mx-4">
                  <div class={`${textFontSize} font-semibold leading-relaxed text-center break-words`}>
                    <!-- Mobile text (shortest) -->
                    <span class="block sm:hidden">{optimizedText.mobile}</span>
                    <!-- Tablet text (medium) -->
                    <span class="hidden sm:block md:hidden">{optimizedText.tablet}</span>
                    <!-- Desktop text (longest) -->
                    <span class="hidden md:block">{optimizedText.desktop}</span>
                  </div>
                </div>
                <!-- Subtitle -->
                <div class="text-xs sm:text-sm opacity-75 px-2 sm:px-3 md:px-4">
                  صورة توضيحية للسؤال
                </div>
              </>
            ) : (
              <>
                <!-- Fallback to character display -->
                <div class="text-4xl sm:text-5xl md:text-6xl font-bold mb-1 sm:mb-2 opacity-90">
                  {firstChar}
                </div>
                <div class="text-xs sm:text-sm opacity-75 px-2 sm:px-3 md:px-4">
                  صورة توضيحية
                </div>
              </>
            )}
          </div>
        </div>
      ) : null}
    </div>
  ) : null}
</div>
</div>

<style>
  .image-fallback {
    display: none;
  }

  .image-main[style*="opacity: 0"] + .image-fallback {
    display: flex;
  }

  .optimized-image {
    transition: opacity 0.2s ease-in-out;
  }

  .optimized-image[loading="lazy"] {
    opacity: 0;
  }

  .optimized-image.loaded {
    opacity: 1;
  }
</style>

<script>
  // Optimize image loading with enhanced performance
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image');

    images.forEach((img) => {
      const imageElement = img as HTMLImageElement;
      if (imageElement.complete) {
        imageElement.classList.add('loaded');
        imageElement.style.opacity = '1';
      } else {
        imageElement.addEventListener('load', function() {
          this.classList.add('loaded');
          this.style.opacity = '1';
        });

        imageElement.addEventListener('error', function() {
          this.style.opacity = '1';
          // Could add error handling here
        });
      }
    });
  });
</script>