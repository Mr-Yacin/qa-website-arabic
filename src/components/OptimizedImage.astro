---
import { generateSrcSet, generateSizes } from '../lib/performance';

export interface Props {
  src?: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  priority?: boolean;
  sizes?: string;
  widths?: number[];
}

const { 
  src, 
  alt, 
  class: className = '', 
  width = 800, 
  height = 450,
  loading = 'lazy',
  decoding = 'async',
  priority = false,
  sizes,
  widths = [400, 800, 1200]
} = Astro.props;

// Generate responsive attributes
const srcSet = src ? generateSrcSet(src, widths) : '';
const sizesAttr = sizes || generateSizes();

// Priority images should load eagerly
const loadingAttr = priority ? 'eager' : loading;
const fetchPriority = priority ? 'high' : 'auto';
---

{src ? (
  <img 
    src={src}
    srcset={srcSet}
    sizes={sizesAttr}
    alt={alt}
    class={`optimized-image ${className}`}
    width={width}
    height={height}
    loading={loadingAttr}
    decoding={decoding}
    fetchpriority={fetchPriority}
    style="aspect-ratio: auto; object-fit: cover;"
  />
) : (
  <div 
    class={`placeholder-image ${className}`}
    style={`width: ${width}px; height: ${height}px; aspect-ratio: ${width}/${height};`}
    role="img"
    aria-label={alt}
  >
    <div class="flex items-center justify-center h-full bg-zinc-200 dark:bg-zinc-800 text-zinc-500 dark:text-zinc-400">
      <svg class="w-12 h-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
      </svg>
    </div>
  </div>
)}

<style>
  .optimized-image {
    transition: opacity 0.2s ease-in-out;
  }
  
  .optimized-image[loading="lazy"] {
    opacity: 0;
  }
  
  .optimized-image.loaded {
    opacity: 1;
  }
  
  .placeholder-image {
    border-radius: 0.5rem;
    overflow: hidden;
  }
</style>

<script>
  // Optimize image loading
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image');
    
    images.forEach((img) => {
      if (img.complete) {
        img.classList.add('loaded');
        img.style.opacity = '1';
      } else {
        img.addEventListener('load', function() {
          this.classList.add('loaded');
          this.style.opacity = '1';
        });
        
        img.addEventListener('error', function() {
          this.style.opacity = '1';
          // Could add error handling here
        });
      }
    });
  });
</script>