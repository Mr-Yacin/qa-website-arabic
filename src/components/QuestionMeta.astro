---
import { formatDate } from '../lib/utils';

export interface Props {
  pubDate: Date;
  updatedDate?: Date;
  tags: string[];
  difficulty: 'easy' | 'medium' | 'hard';
  class?: string;
}

const { pubDate, updatedDate, tags, difficulty, class: className = '' } = Astro.props;

const difficultyColors = {
  easy: 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300',
  medium: 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300',
  hard: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
};

const difficultyLabels = {
  easy: 'سهل',
  medium: 'متوسط',
  hard: 'صعب'
};
---

<div class={`flex flex-col gap-4 ${className}`}>
  <!-- Date Information -->
  <div class="flex flex-col gap-2 text-sm text-zinc-600 dark:text-zinc-400">
    <div class="flex items-center gap-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
      </svg>
      <span>نُشر في:</span>
      <time datetime={pubDate.toISOString()}>
        {formatDate(pubDate)}
      </time>
    </div>
    
    {updatedDate && (
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
        </svg>
        <span>آخر تحديث:</span>
        <time datetime={updatedDate.toISOString()}>
          {formatDate(updatedDate)}
        </time>
      </div>
    )}
  </div>

  <!-- Difficulty Badge -->
  <div class="flex items-center gap-2">
    <svg class="w-4 h-4 text-zinc-500 dark:text-zinc-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
    </svg>
    <span class="text-sm text-zinc-600 dark:text-zinc-400">مستوى الصعوبة:</span>
    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${difficultyColors[difficulty]}`}>
      {difficultyLabels[difficulty]}
    </span>
  </div>

  <!-- Tags -->
  {tags.length > 0 && (
    <div class="flex flex-col gap-2">
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-zinc-500 dark:text-zinc-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
        </svg>
        <span class="text-sm text-zinc-600 dark:text-zinc-400">الوسوم:</span>
      </div>
      <div class="flex flex-wrap gap-2">
        {tags.map((tag) => (
          <a 
            href={`/tags/${tag}`}
            class="inline-flex items-center px-3 py-1 rounded-md text-sm font-medium bg-indigo-100 text-indigo-800 hover:bg-indigo-200 dark:bg-indigo-900/30 dark:text-indigo-300 dark:hover:bg-indigo-900/50 transition-colors"
          >
            #{tag}
          </a>
        ))}
      </div>
    </div>
  )}
</div>