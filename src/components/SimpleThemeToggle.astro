---
// Simple theme toggle component - cycles through system -> light -> dark
---

<button
  type="button"
  class="theme-toggle btn btn-secondary flex items-center gap-2 text-sm"
  data-theme-toggle
  aria-label="تبديل نمط الألوان"
  title="تبديل نمط الألوان"
>
  <!-- Light mode icon -->
  <svg class="w-4 h-4 theme-icon theme-icon-light" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
  
  <!-- Dark mode icon -->
  <svg class="w-4 h-4 theme-icon theme-icon-dark hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
  </svg>
  
  <!-- System mode icon -->
  <svg class="w-4 h-4 theme-icon theme-icon-system hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
  </svg>
  
  <span class="theme-text hidden sm:inline">النظام</span>
</button>

<script>
  import { getStoredTheme, applyTheme, type ThemeMode } from '../lib/theme';

  function initSimpleThemeToggle() {
    const toggleBtn = document.querySelector('[data-theme-toggle]') as HTMLButtonElement;
    if (!toggleBtn) return;

    let currentTheme = getStoredTheme();

    // Theme cycle order: system -> light -> dark -> system
    const themeOrder: ThemeMode[] = ['system', 'light', 'dark'];
    
    // Theme labels in Arabic
    const themeLabels = {
      system: 'النظام',
      light: 'فاتح',
      dark: 'داكن'
    };

    // Update UI to reflect current theme
    function updateUI() {
      const icons = toggleBtn.querySelectorAll('.theme-icon') as NodeListOf<HTMLElement>;
      const text = toggleBtn.querySelector('.theme-text') as HTMLElement;
      
      // Hide all icons
      icons.forEach(icon => icon.classList.add('hidden'));
      
      // Show current theme icon
      const currentIcon = toggleBtn.querySelector(`.theme-icon-${currentTheme}`) as HTMLElement;
      if (currentIcon) {
        currentIcon.classList.remove('hidden');
      }
      
      // Update text
      if (text) {
        text.textContent = themeLabels[currentTheme];
      }
    }

    // Handle theme toggle
    function toggleTheme() {
      const currentIndex = themeOrder.indexOf(currentTheme);
      const nextIndex = (currentIndex + 1) % themeOrder.length;
      currentTheme = themeOrder[nextIndex];
      
      applyTheme(currentTheme);
      updateUI();
    }

    // Event listeners
    toggleBtn.addEventListener('click', toggleTheme);
    
    // Keyboard support
    toggleBtn.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleTheme();
      }
    });

    // Initialize UI
    updateUI();
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSimpleThemeToggle);
  } else {
    initSimpleThemeToggle();
  }
  
  // Re-initialize on page navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', initSimpleThemeToggle);
</script>